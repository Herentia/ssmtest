<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<context:component-scan base-package="com.pb">
		<!-- 不扫描带controller注释的方法 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 启动Aspectj支持 -->
	<aop:aspectj-autoproxy />
		
	<!-- =============================数据源配置========================================= -->
	<!-- 引入数据库配置文件 -->
	<context:property-placeholder location="classpath:dbconf.properties" />
	
	<!-- 配置数据库连接 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />  <!--数据库连接驱动-->
        <property name="jdbcUrl" value="${jdbc.url}" />     <!--数据库地址-->
        <property name="user" value="${jdbc.username}" />   <!--用户名-->
        <property name="password" value="${jdbc.password}" />   <!--密码-->
        <property name="maxPoolSize" value="${jdbc.max_size}" />      <!--最大连接数-->
        <property name="minPoolSize" value="${jdbc.min_size}" />       <!--最小连接数-->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}" />      <!--初始化连接池内的数据库连接-->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}" />  <!--最大空闲时间-->
	</bean>
	<!-- 配置第二个数据库连接，模拟动态切换多个数据库 -->
	<bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />  <!--数据库连接驱动-->
        <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:MYGIS" />     <!--数据库地址-->
        <property name="user" value="gis" />   <!--用户名-->
        <property name="password" value="gis" />   <!--密码-->
        <property name="maxPoolSize" value="${jdbc.max_size}" />      <!--最大连接数-->
        <property name="minPoolSize" value="${jdbc.min_size}" />       <!--最小连接数-->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}" />      <!--初始化连接池内的数据库连接-->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}" />  <!--最大空闲时间-->
	</bean>
	<!-- 配置多个数据库 -->
	<bean id="dataSources" class="com.pb.datasourcewitch.DataSources">
        <property name="defaultTargetDataSource" ref="dataSource"/> <!--默认主库-->
        <property name="targetDataSources">
            <map>
                <entry key="dataSource" value-ref="dataSource"/>    <!--辅助aop完成自动数据库切换-->
                <entry key="dataSource2" value-ref="dataSource2"/>
            </map>
        </property>
    </bean>
	
	<!-- ================================MyBatis配置========================================== -->
	<!-- 配置和mybatis的整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis配置文件位置 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<property name="dataSource" ref="dataSources"></property>
		<!-- 指定mybatis， mapper文件位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入ioc容器口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到 IOC容器 -->
		<property name="basePackage" value="com.pb.dao"></property>
	</bean>
	
	<!-- 配置批量执行的sqlsession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	
	<!-- ==============================Shiro================================= -->
	
	<!--自定义Realm, 实现了reaml接口的bean-->  
    <bean id="myRealm" class="com.pb.shiro.ShiroRealm" />  
    
	<!-- 配置shiro安全管理 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
        <property name="realm" ref="myRealm"></property>  
    </bean>
    
	<!-- 自动调用配置在spring IOC 容器中shiro bean的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- 启用IOC容器中使用shiro的注解，必须在配置生命周期之后 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
    	<property name="proxyTargetClass" value="true"></property>        
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

	<!-- 配置shiroFilter， id必须和web.xml的Filter-name一样 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/user.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- 配置哪些页面需要保护，以及哪些页面需要权限 
        	.anon 可以被匿名访问
        	.authc 必须认证（即登录）后才可以登录页面
        -->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                
                # everything else requires authentication:
                /user.jsp = authc
            </value>
        </property>
    </bean>
    
	
	<!-- ==============================Spring事务配置=============================================== -->
	<!-- 事务控制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制事务源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务 -->
			<tx:method name="*"/>
			<!-- 以get开始的所有方法 -->
			<tx:method name="get" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.pb.service..*(..))" id="txPoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
</beans>